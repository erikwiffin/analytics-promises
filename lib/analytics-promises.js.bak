var _ = require('underscore');

/**
 * Private properties
 */
var A, Analytics;
var clientId = '32779766298-9pmjl10qg95md1opih49n77aipteuev6.apps.googleusercontent.com';
var apiKey = 'AIzaSyBU2E4CrfY7PBjq1_FMLrbOqsxshXnGPfo';
var scopes = 'https://www.googleapis.com/auth/analytics.readonly';

/**
 * Private methods
 */
function checkAuth(promise, immediate) {
	var authPromise = new $.Deferred();

	authPromise
		.done(_.bind(loadAnalytics, promise))
		.fail(_.bind(function () {this.reject();}, promise));

	gapi.client.setApiKey(apiKey);
	gapi.auth.authorize({
			client_id: clientId,
			scope: scopes,
			immediate: immediate
		}, _.bind(handleAuthResult, authPromise));
}
function handleAuthResult(authResult) {
	if (authResult) {
		this.resolve(authResult);
	}
	else {
		this.reject();
	}
}
function loadAnalytics() {
	gapi.client.load('analytics', 'v3', _.bind(function () {
		this.resolve();
	}, this));
}
function loadAccountsList(promise) {
	gapi.client.analytics.management.accounts.list()
		.execute(_.bind(handleAccounts, promise));
}
function handleAccounts(response) {
	this.resolve(response.items);
}
function loadPropertiesList(promise, account) {

	if (account && account.id) {
		account = account.id;
	}

	gapi.client.analytics.management.webproperties.list({
		'accountId': account
	}).execute(_.bind(handleProperties, promise));
}
function handleProperties(response) {
	this.resolve(response.items);
}
function loadProfileList(promise, property) {

	var accountId, webPropertyId;

	if (property && property.accountId && property.id) {
		accountId = property.accountId;
		webPropertyId = property.id;
	}

	gapi.client.analytics.management.profiles.list({
		'accountId': accountId,
		'webPropertyId': webPropertyId
	}).execute(_.bind(handleProfiles, promise));
}
function handleProfiles(response) {
	this.resolve(response.items);
}
function queryCoreReportingApi(promise, profile, query) {

	if (profile && profile.id) {
		profile = 'ga:' + profile.id;
	}

	query.ids = profile;

	gapi.client.analytics.data.ga.get(query)
		.execute(_.bind(handleCoreReportingResults, promise));
}
function handleCoreReportingResults(response) {
	this.resolve(response);
}

/**
 * Public methods
 */
A.init = function (immediate) {

	var promise = new $.Deferred();

	if ("undefined" === typeof immediate) {
		immediate = true;
	}

	_.defer(checkAuth, promise, immediate);

	return promise;
};
A.getAccounts = function () {

	var promise = new $.Deferred();
	_.defer(loadAccountsList, promise);

	return promise;
};

A.getProperties = function (account) {

	var promise = new $.Deferred();
	_.defer(loadPropertiesList, promise, account);

	return promise;
};

A.getProfiles = function (property) {

	var promise = new $.Deferred();
	_.defer(loadProfileList, promise, property);

	return promise;
};

A.query = function (profile, query) {

	var promise = new $.Deferred();
	_.defer(queryCoreReportingApi, promise, profile, query);

	return promise;
};
